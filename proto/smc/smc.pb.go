// Code generated by protoc-gen-go.
// source: smc/smc.proto
// DO NOT EDIT!

/*
Package smc is a generated protocol buffer package.

It is generated from these files:
	smc/smc.proto

It has these top-level messages:
	SessionCtx
	FilterArgs
*/
package smc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import job "github.com/grandcat/flexsmc/proto/job"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SessionCtx struct {
	SessionID string `protobuf:"bytes,1,opt,name=sessionID" json:"sessionID,omitempty"`
}

func (m *SessionCtx) Reset()                    { *m = SessionCtx{} }
func (m *SessionCtx) String() string            { return proto.CompactTextString(m) }
func (*SessionCtx) ProtoMessage()               {}
func (*SessionCtx) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type FilterArgs struct {
}

func (m *FilterArgs) Reset()                    { *m = FilterArgs{} }
func (m *FilterArgs) String() string            { return proto.CompactTextString(m) }
func (*FilterArgs) ProtoMessage()               {}
func (*FilterArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*SessionCtx)(nil), "smc.SessionCtx")
	proto.RegisterType((*FilterArgs)(nil), "smc.FilterArgs")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for SMC service

type SMCClient interface {
	// ResetAll stops and removes all open sessions.
	ResetAll(ctx context.Context, in *FilterArgs, opts ...grpc.CallOption) (*job.CmdResult, error)
	// Init acquires a new session providing a dedicated SMC instance.
	Init(ctx context.Context, in *SessionCtx, opts ...grpc.CallOption) (*job.CmdResult, error)
	// NextCmd runs the supplied command on the current instance.
	// The header must include the session-id to work.
	// In case of an illegal sequence of commands or in case of other errors,
	// the session might be teared down at any time.
	NextCmd(ctx context.Context, in *job.SMCCmd, opts ...grpc.CallOption) (*job.CmdResult, error)
	// TearDown stops the current session at any state.
	TearDown(ctx context.Context, in *SessionCtx, opts ...grpc.CallOption) (*job.CmdResult, error)
}

type sMCClient struct {
	cc *grpc.ClientConn
}

func NewSMCClient(cc *grpc.ClientConn) SMCClient {
	return &sMCClient{cc}
}

func (c *sMCClient) ResetAll(ctx context.Context, in *FilterArgs, opts ...grpc.CallOption) (*job.CmdResult, error) {
	out := new(job.CmdResult)
	err := grpc.Invoke(ctx, "/smc.SMC/ResetAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMCClient) Init(ctx context.Context, in *SessionCtx, opts ...grpc.CallOption) (*job.CmdResult, error) {
	out := new(job.CmdResult)
	err := grpc.Invoke(ctx, "/smc.SMC/Init", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMCClient) NextCmd(ctx context.Context, in *job.SMCCmd, opts ...grpc.CallOption) (*job.CmdResult, error) {
	out := new(job.CmdResult)
	err := grpc.Invoke(ctx, "/smc.SMC/NextCmd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMCClient) TearDown(ctx context.Context, in *SessionCtx, opts ...grpc.CallOption) (*job.CmdResult, error) {
	out := new(job.CmdResult)
	err := grpc.Invoke(ctx, "/smc.SMC/TearDown", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SMC service

type SMCServer interface {
	// ResetAll stops and removes all open sessions.
	ResetAll(context.Context, *FilterArgs) (*job.CmdResult, error)
	// Init acquires a new session providing a dedicated SMC instance.
	Init(context.Context, *SessionCtx) (*job.CmdResult, error)
	// NextCmd runs the supplied command on the current instance.
	// The header must include the session-id to work.
	// In case of an illegal sequence of commands or in case of other errors,
	// the session might be teared down at any time.
	NextCmd(context.Context, *job.SMCCmd) (*job.CmdResult, error)
	// TearDown stops the current session at any state.
	TearDown(context.Context, *SessionCtx) (*job.CmdResult, error)
}

func RegisterSMCServer(s *grpc.Server, srv SMCServer) {
	s.RegisterService(&_SMC_serviceDesc, srv)
}

func _SMC_ResetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMCServer).ResetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smc.SMC/ResetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMCServer).ResetAll(ctx, req.(*FilterArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMC_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionCtx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMCServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smc.SMC/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMCServer).Init(ctx, req.(*SessionCtx))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMC_NextCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(job.SMCCmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMCServer).NextCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smc.SMC/NextCmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMCServer).NextCmd(ctx, req.(*job.SMCCmd))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMC_TearDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionCtx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMCServer).TearDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smc.SMC/TearDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMCServer).TearDown(ctx, req.(*SessionCtx))
	}
	return interceptor(ctx, in, info, handler)
}

var _SMC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "smc.SMC",
	HandlerType: (*SMCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResetAll",
			Handler:    _SMC_ResetAll_Handler,
		},
		{
			MethodName: "Init",
			Handler:    _SMC_Init_Handler,
		},
		{
			MethodName: "NextCmd",
			Handler:    _SMC_NextCmd_Handler,
		},
		{
			MethodName: "TearDown",
			Handler:    _SMC_TearDown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("smc/smc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0xce, 0x4d, 0xd6,
	0x07, 0x62, 0xbd, 0x82, 0xa2, 0xfc, 0x92, 0x7c, 0x21, 0x66, 0x20, 0x53, 0x4a, 0x3f, 0x3d, 0xb3,
	0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0x3f, 0xbd, 0x28, 0x31, 0x2f, 0x25, 0x39, 0xb1,
	0x44, 0x3f, 0x2d, 0x27, 0xb5, 0x02, 0xa4, 0x16, 0xac, 0x4e, 0x3f, 0x2b, 0x3f, 0x09, 0x84, 0x21,
	0xba, 0x94, 0xb4, 0xb8, 0xb8, 0x82, 0x53, 0x8b, 0x8b, 0x33, 0xf3, 0xf3, 0x9c, 0x4b, 0x2a, 0x84,
	0x64, 0xb8, 0x38, 0x8b, 0x21, 0x3c, 0x4f, 0x17, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x84,
	0x80, 0x12, 0x0f, 0x17, 0x97, 0x5b, 0x66, 0x4e, 0x49, 0x6a, 0x91, 0x63, 0x51, 0x7a, 0xb1, 0xd1,
	0x0e, 0x46, 0x2e, 0xe6, 0x60, 0x5f, 0x67, 0x21, 0x5d, 0x2e, 0x8e, 0xa0, 0xd4, 0xe2, 0xd4, 0x12,
	0xc7, 0x9c, 0x1c, 0x21, 0x7e, 0x3d, 0x90, 0x7b, 0x10, 0x8a, 0xa4, 0xf8, 0xf4, 0x40, 0x56, 0x39,
	0xe7, 0xa6, 0x00, 0x95, 0x94, 0xe6, 0x94, 0x28, 0x31, 0x08, 0x69, 0x72, 0xb1, 0x78, 0xe6, 0x65,
	0x96, 0x40, 0x95, 0x22, 0xec, 0xc6, 0xa2, 0x54, 0x83, 0x8b, 0xdd, 0x2f, 0xb5, 0xa2, 0x04, 0x28,
	0x24, 0xc4, 0x0d, 0x96, 0x04, 0x5a, 0x07, 0xe4, 0x60, 0x51, 0x09, 0x74, 0x43, 0x48, 0x6a, 0x62,
	0x91, 0x4b, 0x7e, 0x79, 0x1e, 0x11, 0x06, 0x3b, 0xe9, 0x73, 0x89, 0xa5, 0xa4, 0xea, 0x95, 0x94,
	0xe6, 0xea, 0x41, 0x83, 0x06, 0xac, 0xa5, 0xa8, 0x20, 0xd9, 0x89, 0x07, 0x64, 0x45, 0x7e, 0x5e,
	0x5e, 0x6a, 0x72, 0x49, 0x7e, 0x51, 0x00, 0xe3, 0x22, 0x26, 0x16, 0x90, 0x40, 0x12, 0x1b, 0x38,
	0xb0, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9f, 0xcb, 0x59, 0xff, 0x73, 0x01, 0x00, 0x00,
}
