syntax = "proto3";

package job;

option java_multiple_files = true;
option java_package = "de.tum.flexsmc.smc.rpc";
option java_outer_classname = "Job";
option objc_class_prefix = "JOB";

import "google/protobuf/timestamp.proto";

enum DataOrigin {
    TEMPERATURE  = 0;
    HUMIDITY     = 1;
    AMBIENT      = 2;
    AIR_PRESSURE = 3;

    PRESENCE     = 10;

    // Dynamically assigned sensor types.
    RESERVED_999             = 999;
    DYNAMIC_ASSIGNMENT_1000  = 1000;
    // ...
    DYNAMIC_ASSIGNMENT_99999 = 99999;
    RESERVED_100000          = 100000;
}

enum Aggregator {
    SUM             = 0;
    AVG             = 1;
    MEDIAN          = 2;
    STD_DEVIATION   = 3;

    DBG_PINGPONG    = 1000;
    DBG_SET_CONFIG  = 1001;
}

message Option {
    oneof optValue {
        string str = 1;
        int32 dec  = 2;
    }
}

message SMCTask {
    string set                       = 1;
    DataOrigin source                = 2;
    // (Pre)Selectors
    Aggregator aggregator            = 4;
    map<string, Option> options      = 6;
    string ticketSignature           = 7;

    google.protobuf.Timestamp issued = 8;
    string querySignature            = 9;
}

// Job phases
// The concatenation of serveral phases defines the flow and coordination of a job.
// The sequence and content is built by the job pipeline. The FSM on peer side needs
// to be adapted for new phases or certain configurations.

message PreparePhase {
    message Participant {
        // Fixed authentication (certificate) based identity
        string authID   = 1;
        // Temporarily assigned peer identity for the current SMC task
        int32 smcPeerID = 2;
        // Address and port of the service (address:port)
        string endpoint = 3;
    }
    repeated Participant participants = 1;
    SMCTask smcTask                   = 3;
}

message LinkingPhase { }

message SessionPhase { }

message DebugPhase {
    int32 ping                  = 1;
    bool morePhases             = 3;
    // options configures the peers' environment. Otherwise, it is empty.
    map<string, Option> options = 2;
}

// Envelopes to send and receive jobs with some context.

message SMCCmd {
    string sessionID        = 1;
    int32 smcPeerID         = 5;
    enum Phase {
        PREPARE  = 0;
        LINK     = 1;
        SESSION  = 2;
        // ...
        FINISH   = 126;
        ABORT    = 127;
    }
    Phase state              = 2;
    // Payload packet
    oneof payload {
        PreparePhase prepare = 3;
        LinkingPhase link    = 6;
        SessionPhase session = 4;
        DebugPhase debug     = 9;
    }
}

enum MetadataKey {
    PEERID = 0;
}

message CmdResult {
    enum Status {
        // Class: success and info
        SUCCESS      = 0;
        SUCCESS_DONE = 1;
        // Class: soft or recoverable errors (32 - 63)
        ERR_CLASS_NORM  = 32;
        UNKNOWN_CMD     = 33;
        DENIED          = 34;
        // Class: irreversible errors on peer side (64 - 127)
        ERR_CLASS_FAULT = 64;
        ABORTED         = 65;
        // Class: communication errors (128 - 255)
        ERR_CLASS_COMM  = 128;
        STREAM_ERR      = 129;

        SEVERE_ERROR_CLASSES = 192; //      64 + 128
        ALL_ERROR_CLASSES    = 224; // 32 + 64 + 128
    }
    Status status    = 1;
    string msg       = 2;
    SMCResult result = 3;
    // Partly filled on receiver side (e.g. peer ID)
    map<string, string> metadata = 7;
}

message SMCResult {
    double res = 1;
}