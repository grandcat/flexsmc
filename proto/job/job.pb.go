// Code generated by protoc-gen-go.
// source: job/job.proto
// DO NOT EDIT!

/*
Package job is a generated protocol buffer package.

It is generated from these files:
	job/job.proto

It has these top-level messages:
	SMCTask
	PreparePhase
	SessionPhase
	CmdResult
	SMCResult
*/
package job

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DataOrigin int32

const (
	DataOrigin_TEMPERATURE  DataOrigin = 0
	DataOrigin_HUMIDITY     DataOrigin = 1
	DataOrigin_AMBIENT      DataOrigin = 2
	DataOrigin_AIR_PRESSURE DataOrigin = 3
	DataOrigin_PRESENCE     DataOrigin = 10
	// Dynamically assigned sensor types.
	DataOrigin_RESERVED_999            DataOrigin = 999
	DataOrigin_DYNAMIC_ASSIGNMENT_1000 DataOrigin = 1000
	// ...
	DataOrigin_DYNAMIC_ASSIGNMENT_99999 DataOrigin = 99999
	DataOrigin_RESERVED_100000          DataOrigin = 100000
)

var DataOrigin_name = map[int32]string{
	0:      "TEMPERATURE",
	1:      "HUMIDITY",
	2:      "AMBIENT",
	3:      "AIR_PRESSURE",
	10:     "PRESENCE",
	999:    "RESERVED_999",
	1000:   "DYNAMIC_ASSIGNMENT_1000",
	99999:  "DYNAMIC_ASSIGNMENT_99999",
	100000: "RESERVED_100000",
}
var DataOrigin_value = map[string]int32{
	"TEMPERATURE":              0,
	"HUMIDITY":                 1,
	"AMBIENT":                  2,
	"AIR_PRESSURE":             3,
	"PRESENCE":                 10,
	"RESERVED_999":             999,
	"DYNAMIC_ASSIGNMENT_1000":  1000,
	"DYNAMIC_ASSIGNMENT_99999": 99999,
	"RESERVED_100000":          100000,
}

func (x DataOrigin) String() string {
	return proto.EnumName(DataOrigin_name, int32(x))
}
func (DataOrigin) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Aggregator int32

const (
	Aggregator_SUM           Aggregator = 0
	Aggregator_AVG           Aggregator = 1
	Aggregator_MEDIAN        Aggregator = 2
	Aggregator_STD_DEVIATION Aggregator = 3
)

var Aggregator_name = map[int32]string{
	0: "SUM",
	1: "AVG",
	2: "MEDIAN",
	3: "STD_DEVIATION",
}
var Aggregator_value = map[string]int32{
	"SUM":           0,
	"AVG":           1,
	"MEDIAN":        2,
	"STD_DEVIATION": 3,
}

func (x Aggregator) String() string {
	return proto.EnumName(Aggregator_name, int32(x))
}
func (Aggregator) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CmdResult_Status int32

const (
	CmdResult_SUCCESS     CmdResult_Status = 0
	CmdResult_UNKNOWN_CMD CmdResult_Status = 1
	CmdResult_DENIED      CmdResult_Status = 2
	CmdResult_ABORTED     CmdResult_Status = 3
	// Communication related errors
	CmdResult_STREAM_ERR CmdResult_Status = 128
)

var CmdResult_Status_name = map[int32]string{
	0:   "SUCCESS",
	1:   "UNKNOWN_CMD",
	2:   "DENIED",
	3:   "ABORTED",
	128: "STREAM_ERR",
}
var CmdResult_Status_value = map[string]int32{
	"SUCCESS":     0,
	"UNKNOWN_CMD": 1,
	"DENIED":      2,
	"ABORTED":     3,
	"STREAM_ERR":  128,
}

func (x CmdResult_Status) String() string {
	return proto.EnumName(CmdResult_Status_name, int32(x))
}
func (CmdResult_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type SMCTask struct {
	Set    string     `protobuf:"bytes,1,opt,name=Set,json=set" json:"Set,omitempty"`
	Source DataOrigin `protobuf:"varint,2,opt,name=source,enum=job.DataOrigin" json:"source,omitempty"`
	// (Pre)Selectors
	Aggregator      Aggregator                 `protobuf:"varint,4,opt,name=aggregator,enum=job.Aggregator" json:"aggregator,omitempty"`
	TicketSignature string                     `protobuf:"bytes,7,opt,name=ticketSignature" json:"ticketSignature,omitempty"`
	Issued          *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=issued" json:"issued,omitempty"`
	QuerySignature  string                     `protobuf:"bytes,9,opt,name=querySignature" json:"querySignature,omitempty"`
}

func (m *SMCTask) Reset()                    { *m = SMCTask{} }
func (m *SMCTask) String() string            { return proto.CompactTextString(m) }
func (*SMCTask) ProtoMessage()               {}
func (*SMCTask) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SMCTask) GetIssued() *google_protobuf.Timestamp {
	if m != nil {
		return m.Issued
	}
	return nil
}

type PreparePhase struct {
	Participants []*PreparePhase_Participant `protobuf:"bytes,1,rep,name=participants" json:"participants,omitempty"`
	SmcTask      *SMCTask                    `protobuf:"bytes,2,opt,name=smcTask" json:"smcTask,omitempty"`
}

func (m *PreparePhase) Reset()                    { *m = PreparePhase{} }
func (m *PreparePhase) String() string            { return proto.CompactTextString(m) }
func (*PreparePhase) ProtoMessage()               {}
func (*PreparePhase) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PreparePhase) GetParticipants() []*PreparePhase_Participant {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *PreparePhase) GetSmcTask() *SMCTask {
	if m != nil {
		return m.SmcTask
	}
	return nil
}

type PreparePhase_Participant struct {
	Identity string `protobuf:"bytes,1,opt,name=identity" json:"identity,omitempty"`
	Addr     string `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
}

func (m *PreparePhase_Participant) Reset()                    { *m = PreparePhase_Participant{} }
func (m *PreparePhase_Participant) String() string            { return proto.CompactTextString(m) }
func (*PreparePhase_Participant) ProtoMessage()               {}
func (*PreparePhase_Participant) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type SessionPhase struct {
}

func (m *SessionPhase) Reset()                    { *m = SessionPhase{} }
func (m *SessionPhase) String() string            { return proto.CompactTextString(m) }
func (*SessionPhase) ProtoMessage()               {}
func (*SessionPhase) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type CmdResult struct {
	Status CmdResult_Status `protobuf:"varint,1,opt,name=status,enum=job.CmdResult_Status" json:"status,omitempty"`
	Msg    string           `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	Result *SMCResult       `protobuf:"bytes,3,opt,name=result" json:"result,omitempty"`
	// Partly filled on receiver side (e.g. peer ID)
	Metadata map[string]string `protobuf:"bytes,7,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *CmdResult) Reset()                    { *m = CmdResult{} }
func (m *CmdResult) String() string            { return proto.CompactTextString(m) }
func (*CmdResult) ProtoMessage()               {}
func (*CmdResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CmdResult) GetResult() *SMCResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *CmdResult) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type SMCResult struct {
	Res float64 `protobuf:"fixed64,1,opt,name=res" json:"res,omitempty"`
}

func (m *SMCResult) Reset()                    { *m = SMCResult{} }
func (m *SMCResult) String() string            { return proto.CompactTextString(m) }
func (*SMCResult) ProtoMessage()               {}
func (*SMCResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*SMCTask)(nil), "job.SMCTask")
	proto.RegisterType((*PreparePhase)(nil), "job.PreparePhase")
	proto.RegisterType((*PreparePhase_Participant)(nil), "job.PreparePhase.Participant")
	proto.RegisterType((*SessionPhase)(nil), "job.SessionPhase")
	proto.RegisterType((*CmdResult)(nil), "job.CmdResult")
	proto.RegisterType((*SMCResult)(nil), "job.SMCResult")
	proto.RegisterEnum("job.DataOrigin", DataOrigin_name, DataOrigin_value)
	proto.RegisterEnum("job.Aggregator", Aggregator_name, Aggregator_value)
	proto.RegisterEnum("job.CmdResult_Status", CmdResult_Status_name, CmdResult_Status_value)
}

func init() { proto.RegisterFile("job/job.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 732 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x53, 0xdd, 0x6e, 0xda, 0x48,
	0x14, 0x5e, 0xe3, 0xac, 0x81, 0x03, 0x01, 0x67, 0xb4, 0xd9, 0x45, 0x28, 0xd9, 0x5d, 0x21, 0xed,
	0x6e, 0x14, 0x69, 0x4d, 0x4a, 0x6f, 0x42, 0xab, 0x5c, 0x18, 0x6c, 0xa5, 0x4e, 0x65, 0x83, 0xc6,
	0x26, 0x55, 0xae, 0x90, 0x81, 0x89, 0xeb, 0x06, 0x30, 0xb5, 0xc7, 0x55, 0x73, 0xd7, 0x17, 0xc8,
	0x33, 0xb4, 0xea, 0x53, 0xf4, 0xa6, 0x52, 0xdf, 0xa6, 0x7d, 0x87, 0xde, 0x74, 0x66, 0x30, 0x3f,
	0x89, 0x6a, 0xc9, 0xd2, 0x39, 0x73, 0xbe, 0xf9, 0xce, 0xf7, 0x9d, 0x99, 0x81, 0xdd, 0x57, 0xd1,
	0xa8, 0xc9, 0x7e, 0x6d, 0x11, 0x47, 0x34, 0x42, 0x32, 0x0b, 0xeb, 0x7f, 0x05, 0x51, 0x14, 0x4c,
	0x49, 0x53, 0x2c, 0x8d, 0xd2, 0xeb, 0x26, 0x0d, 0x67, 0x24, 0xa1, 0xfe, 0x6c, 0xb1, 0x44, 0x35,
	0xbe, 0x4b, 0x90, 0x77, 0xed, 0xae, 0xe7, 0x27, 0x37, 0x48, 0x05, 0xd9, 0x25, 0xb4, 0x26, 0xfd,
	0x2d, 0x1d, 0x15, 0xb1, 0x9c, 0x10, 0x8a, 0xfe, 0x03, 0x25, 0x89, 0xd2, 0x78, 0x4c, 0x6a, 0x39,
	0xb6, 0x58, 0x69, 0x55, 0x35, 0xce, 0x6f, 0xf8, 0xd4, 0xef, 0xc5, 0x61, 0x10, 0xce, 0x71, 0x56,
	0x46, 0x4d, 0x00, 0x3f, 0x08, 0x62, 0x12, 0xf8, 0x34, 0x8a, 0x6b, 0x3b, 0x5b, 0x60, 0x7d, 0xbd,
	0x8c, 0xb7, 0x20, 0xe8, 0x08, 0xaa, 0x34, 0x1c, 0xdf, 0x10, 0xea, 0x86, 0xc1, 0xdc, 0xa7, 0x69,
	0x4c, 0x6a, 0x79, 0xd1, 0xf7, 0xe1, 0x32, 0x6a, 0x81, 0x12, 0x26, 0x49, 0x4a, 0x26, 0xb5, 0x02,
	0x03, 0x94, 0x5a, 0x75, 0x6d, 0xe9, 0x49, 0x5b, 0x79, 0xd2, 0xbc, 0x95, 0x27, 0x9c, 0x21, 0xd1,
	0xbf, 0x50, 0x79, 0x9d, 0x92, 0xf8, 0x76, 0x43, 0x5e, 0x14, 0xe4, 0x0f, 0x56, 0x1b, 0x9f, 0x24,
	0x28, 0xf7, 0x63, 0xb2, 0xf0, 0x63, 0xd2, 0x7f, 0xe9, 0x27, 0x04, 0xe9, 0x50, 0x66, 0x09, 0x93,
	0x10, 0x2e, 0xfc, 0x39, 0x4d, 0xd8, 0x2c, 0x64, 0xd6, 0xf2, 0x50, 0x38, 0xd9, 0x06, 0x6a, 0xfd,
	0x0d, 0x0a, 0xdf, 0xdb, 0xc2, 0x7a, 0xe7, 0x93, 0xd9, 0x98, 0x0f, 0x54, 0x0c, 0xad, 0xd4, 0x2a,
	0x8b, 0xdd, 0xd9, 0x90, 0xf1, 0xaa, 0x58, 0x3f, 0x83, 0xd2, 0x16, 0x09, 0xaa, 0x43, 0x21, 0x9c,
	0x90, 0x39, 0x0d, 0xe9, 0x6d, 0x76, 0x02, 0xeb, 0x1c, 0x21, 0xd8, 0xf1, 0x27, 0x93, 0x58, 0xf0,
	0x15, 0xb1, 0x88, 0x1b, 0x15, 0x28, 0xbb, 0x24, 0x49, 0xc2, 0x68, 0x2e, 0x04, 0x35, 0x3e, 0xe7,
	0xa0, 0xd8, 0x9d, 0x4d, 0x30, 0x49, 0xd2, 0x29, 0x45, 0xff, 0xb3, 0x83, 0xa3, 0xcc, 0x63, 0x22,
	0xb8, 0x2a, 0xad, 0x7d, 0xa1, 0x61, 0x5d, 0xd7, 0x5c, 0x51, 0xc4, 0x19, 0x88, 0x9f, 0xfc, 0x2c,
	0x09, 0x32, 0x7e, 0x1e, 0x32, 0x17, 0x4a, 0x2c, 0xa0, 0x35, 0x59, 0x98, 0xa8, 0xac, 0x4c, 0x2c,
	0x09, 0x70, 0x56, 0x45, 0xa7, 0x50, 0x98, 0x11, 0xea, 0x4f, 0xd8, 0x95, 0x60, 0x07, 0xc8, 0x87,
	0x75, 0xf0, 0xa0, 0x95, 0x9d, 0x95, 0xcd, 0x39, 0x8d, 0x6f, 0xf1, 0x1a, 0x5d, 0x7f, 0x0a, 0xbb,
	0xf7, 0x4a, 0x5c, 0xc4, 0x0d, 0x59, 0x99, 0xe7, 0x21, 0xfa, 0x0d, 0x7e, 0x7d, 0xe3, 0x4f, 0x53,
	0x92, 0x09, 0x5b, 0x26, 0x4f, 0x72, 0xa7, 0x52, 0xa3, 0x0f, 0xca, 0xd2, 0x02, 0x2a, 0xb1, 0xfb,
	0x3b, 0xe8, 0x76, 0x4d, 0xd7, 0x55, 0x7f, 0x41, 0x55, 0x28, 0x0d, 0x9c, 0xe7, 0x4e, 0xef, 0x85,
	0x33, 0xec, 0xda, 0x86, 0x2a, 0x21, 0x00, 0xc5, 0x30, 0x1d, 0xcb, 0x34, 0xd4, 0x1c, 0x47, 0xea,
	0x9d, 0x1e, 0xf6, 0x58, 0x22, 0x33, 0x24, 0xb8, 0x1e, 0x36, 0x75, 0x7b, 0x68, 0x62, 0xac, 0xbe,
	0x93, 0x1a, 0x87, 0x50, 0x5c, 0xbb, 0xe3, 0x52, 0x98, 0x3f, 0x21, 0x45, 0xc2, 0x3c, 0x3c, 0xfe,
	0x22, 0x01, 0x6c, 0xee, 0x3d, 0x6f, 0xe4, 0x99, 0x76, 0xdf, 0xc4, 0xba, 0x37, 0xc0, 0x26, 0xeb,
	0x5c, 0x86, 0xc2, 0xb3, 0x81, 0x6d, 0x19, 0x96, 0x77, 0xc5, 0xda, 0xf2, 0x56, 0x76, 0xc7, 0x32,
	0x1d, 0x8f, 0xf5, 0x55, 0xa1, 0xac, 0x5b, 0x78, 0xd8, 0xc7, 0x4c, 0x23, 0x07, 0xcb, 0x1c, 0xcc,
	0x33, 0xd3, 0xe9, 0x9a, 0x2a, 0xa0, 0x3d, 0x28, 0xf3, 0x04, 0x5f, 0x9a, 0xc6, 0xb0, 0xdd, 0x6e,
	0xab, 0x5f, 0xf3, 0xe8, 0x00, 0xfe, 0x30, 0xae, 0x1c, 0xdd, 0xb6, 0xba, 0x43, 0xdd, 0x75, 0xad,
	0x73, 0xc7, 0x66, 0x54, 0xc3, 0x47, 0x27, 0x27, 0x27, 0xea, 0xb7, 0x3c, 0xfa, 0x13, 0x6a, 0x3f,
	0xa9, 0xb6, 0xf9, 0xa7, 0xbe, 0xbf, 0x53, 0xd0, 0x3e, 0x54, 0xd7, 0x84, 0x7c, 0x0f, 0xdb, 0xf5,
	0xe1, 0x4e, 0x39, 0x3e, 0x03, 0xd8, 0x3c, 0x46, 0x94, 0x67, 0x8f, 0x7d, 0x60, 0x33, 0xe5, 0x2c,
	0xd0, 0x2f, 0xcf, 0x97, 0xb3, 0xb2, 0x4d, 0xc3, 0xd2, 0x1d, 0xa6, 0x79, 0x0f, 0x76, 0x5d, 0xcf,
	0x18, 0x1a, 0xe6, 0xa5, 0xa5, 0x7b, 0x56, 0xcf, 0x51, 0xe5, 0xce, 0x3f, 0xf0, 0xfb, 0x84, 0x68,
	0x34, 0x9d, 0x69, 0xd7, 0x53, 0xf2, 0x96, 0xdd, 0x62, 0x8d, 0xff, 0xf1, 0x62, 0xdc, 0x91, 0x2f,
	0xa2, 0x51, 0x5f, 0xfa, 0x98, 0x93, 0x2f, 0x7a, 0x9d, 0x91, 0x22, 0x9e, 0xe5, 0xe3, 0x1f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x24, 0x8b, 0xa1, 0x0c, 0x8e, 0x04, 0x00, 0x00,
}
