// Code generated by protoc-gen-go.
// source: job/job.proto
// DO NOT EDIT!

/*
Package job is a generated protocol buffer package.

It is generated from these files:
	job/job.proto

It has these top-level messages:
	SMCTask
	PreparePhase
	SessionPhase
	SMCCmd
	CmdResult
	SMCResult
*/
package job

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DataOrigin int32

const (
	DataOrigin_TEMPERATURE  DataOrigin = 0
	DataOrigin_HUMIDITY     DataOrigin = 1
	DataOrigin_AMBIENT      DataOrigin = 2
	DataOrigin_AIR_PRESSURE DataOrigin = 3
	DataOrigin_PRESENCE     DataOrigin = 10
	// Dynamically assigned sensor types.
	DataOrigin_RESERVED_999            DataOrigin = 999
	DataOrigin_DYNAMIC_ASSIGNMENT_1000 DataOrigin = 1000
	// ...
	DataOrigin_DYNAMIC_ASSIGNMENT_99999 DataOrigin = 99999
	DataOrigin_RESERVED_100000          DataOrigin = 100000
)

var DataOrigin_name = map[int32]string{
	0:      "TEMPERATURE",
	1:      "HUMIDITY",
	2:      "AMBIENT",
	3:      "AIR_PRESSURE",
	10:     "PRESENCE",
	999:    "RESERVED_999",
	1000:   "DYNAMIC_ASSIGNMENT_1000",
	99999:  "DYNAMIC_ASSIGNMENT_99999",
	100000: "RESERVED_100000",
}
var DataOrigin_value = map[string]int32{
	"TEMPERATURE":              0,
	"HUMIDITY":                 1,
	"AMBIENT":                  2,
	"AIR_PRESSURE":             3,
	"PRESENCE":                 10,
	"RESERVED_999":             999,
	"DYNAMIC_ASSIGNMENT_1000":  1000,
	"DYNAMIC_ASSIGNMENT_99999": 99999,
	"RESERVED_100000":          100000,
}

func (x DataOrigin) String() string {
	return proto.EnumName(DataOrigin_name, int32(x))
}
func (DataOrigin) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Aggregator int32

const (
	Aggregator_SUM           Aggregator = 0
	Aggregator_AVG           Aggregator = 1
	Aggregator_MEDIAN        Aggregator = 2
	Aggregator_STD_DEVIATION Aggregator = 3
)

var Aggregator_name = map[int32]string{
	0: "SUM",
	1: "AVG",
	2: "MEDIAN",
	3: "STD_DEVIATION",
}
var Aggregator_value = map[string]int32{
	"SUM":           0,
	"AVG":           1,
	"MEDIAN":        2,
	"STD_DEVIATION": 3,
}

func (x Aggregator) String() string {
	return proto.EnumName(Aggregator_name, int32(x))
}
func (Aggregator) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type MetadataKey int32

const (
	MetadataKey_PEERID MetadataKey = 0
)

var MetadataKey_name = map[int32]string{
	0: "PEERID",
}
var MetadataKey_value = map[string]int32{
	"PEERID": 0,
}

func (x MetadataKey) String() string {
	return proto.EnumName(MetadataKey_name, int32(x))
}
func (MetadataKey) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type SMCCmd_Phase int32

const (
	SMCCmd_PREPARE SMCCmd_Phase = 0
	SMCCmd_SESSION SMCCmd_Phase = 1
	// ...
	SMCCmd_FINISH SMCCmd_Phase = 126
	SMCCmd_ABORT  SMCCmd_Phase = 127
)

var SMCCmd_Phase_name = map[int32]string{
	0:   "PREPARE",
	1:   "SESSION",
	126: "FINISH",
	127: "ABORT",
}
var SMCCmd_Phase_value = map[string]int32{
	"PREPARE": 0,
	"SESSION": 1,
	"FINISH":  126,
	"ABORT":   127,
}

func (x SMCCmd_Phase) String() string {
	return proto.EnumName(SMCCmd_Phase_name, int32(x))
}
func (SMCCmd_Phase) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type CmdResult_Status int32

const (
	// Class: success and info
	CmdResult_SUCCESS      CmdResult_Status = 0
	CmdResult_SUCCESS_DONE CmdResult_Status = 1
	// Class: soft or recoverable errors (32 - 63)
	CmdResult_ERR_CLASS_NORM CmdResult_Status = 32
	CmdResult_UNKNOWN_CMD    CmdResult_Status = 33
	CmdResult_DENIED         CmdResult_Status = 34
	// Class: irreversible errors on peer side (64 - 127)
	CmdResult_ERR_CLASS_FAULT CmdResult_Status = 64
	CmdResult_ABORTED         CmdResult_Status = 65
	// Class: communication errors (128 - 255)
	CmdResult_ERR_CLASS_COMM       CmdResult_Status = 128
	CmdResult_STREAM_ERR           CmdResult_Status = 129
	CmdResult_SEVERE_ERROR_CLASSES CmdResult_Status = 192
	CmdResult_ALL_ERROR_CLASSES    CmdResult_Status = 224
)

var CmdResult_Status_name = map[int32]string{
	0:   "SUCCESS",
	1:   "SUCCESS_DONE",
	32:  "ERR_CLASS_NORM",
	33:  "UNKNOWN_CMD",
	34:  "DENIED",
	64:  "ERR_CLASS_FAULT",
	65:  "ABORTED",
	128: "ERR_CLASS_COMM",
	129: "STREAM_ERR",
	192: "SEVERE_ERROR_CLASSES",
	224: "ALL_ERROR_CLASSES",
}
var CmdResult_Status_value = map[string]int32{
	"SUCCESS":              0,
	"SUCCESS_DONE":         1,
	"ERR_CLASS_NORM":       32,
	"UNKNOWN_CMD":          33,
	"DENIED":               34,
	"ERR_CLASS_FAULT":      64,
	"ABORTED":              65,
	"ERR_CLASS_COMM":       128,
	"STREAM_ERR":           129,
	"SEVERE_ERROR_CLASSES": 192,
	"ALL_ERROR_CLASSES":    224,
}

func (x CmdResult_Status) String() string {
	return proto.EnumName(CmdResult_Status_name, int32(x))
}
func (CmdResult_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

type SMCTask struct {
	Set    string     `protobuf:"bytes,1,opt,name=set" json:"set,omitempty"`
	Source DataOrigin `protobuf:"varint,2,opt,name=source,enum=job.DataOrigin" json:"source,omitempty"`
	// (Pre)Selectors
	Aggregator      Aggregator                 `protobuf:"varint,4,opt,name=aggregator,enum=job.Aggregator" json:"aggregator,omitempty"`
	TicketSignature string                     `protobuf:"bytes,7,opt,name=ticketSignature" json:"ticketSignature,omitempty"`
	Issued          *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=issued" json:"issued,omitempty"`
	QuerySignature  string                     `protobuf:"bytes,9,opt,name=querySignature" json:"querySignature,omitempty"`
}

func (m *SMCTask) Reset()                    { *m = SMCTask{} }
func (m *SMCTask) String() string            { return proto.CompactTextString(m) }
func (*SMCTask) ProtoMessage()               {}
func (*SMCTask) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SMCTask) GetIssued() *google_protobuf.Timestamp {
	if m != nil {
		return m.Issued
	}
	return nil
}

type PreparePhase struct {
	Participants []*PreparePhase_Participant `protobuf:"bytes,1,rep,name=participants" json:"participants,omitempty"`
	SmcTask      *SMCTask                    `protobuf:"bytes,3,opt,name=smcTask" json:"smcTask,omitempty"`
}

func (m *PreparePhase) Reset()                    { *m = PreparePhase{} }
func (m *PreparePhase) String() string            { return proto.CompactTextString(m) }
func (*PreparePhase) ProtoMessage()               {}
func (*PreparePhase) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PreparePhase) GetParticipants() []*PreparePhase_Participant {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *PreparePhase) GetSmcTask() *SMCTask {
	if m != nil {
		return m.SmcTask
	}
	return nil
}

type PreparePhase_Participant struct {
	// Fixed authentication (certificate) based identity
	AuthID string `protobuf:"bytes,1,opt,name=authID" json:"authID,omitempty"`
	// Temporarily assigned peer identity for the current SMC task
	SmcPeerID int32 `protobuf:"varint,2,opt,name=smcPeerID" json:"smcPeerID,omitempty"`
	// Address and port of the service (address:port)
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint" json:"endpoint,omitempty"`
}

func (m *PreparePhase_Participant) Reset()                    { *m = PreparePhase_Participant{} }
func (m *PreparePhase_Participant) String() string            { return proto.CompactTextString(m) }
func (*PreparePhase_Participant) ProtoMessage()               {}
func (*PreparePhase_Participant) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type SessionPhase struct {
}

func (m *SessionPhase) Reset()                    { *m = SessionPhase{} }
func (m *SessionPhase) String() string            { return proto.CompactTextString(m) }
func (*SessionPhase) ProtoMessage()               {}
func (*SessionPhase) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type SMCCmd struct {
	SessionID string       `protobuf:"bytes,1,opt,name=sessionID" json:"sessionID,omitempty"`
	SmcPeerID int32        `protobuf:"varint,5,opt,name=smcPeerID" json:"smcPeerID,omitempty"`
	State     SMCCmd_Phase `protobuf:"varint,2,opt,name=state,enum=job.SMCCmd_Phase" json:"state,omitempty"`
	// Payload packet
	//
	// Types that are valid to be assigned to Payload:
	//	*SMCCmd_Prepare
	//	*SMCCmd_Session
	Payload isSMCCmd_Payload `protobuf_oneof:"payload"`
}

func (m *SMCCmd) Reset()                    { *m = SMCCmd{} }
func (m *SMCCmd) String() string            { return proto.CompactTextString(m) }
func (*SMCCmd) ProtoMessage()               {}
func (*SMCCmd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type isSMCCmd_Payload interface {
	isSMCCmd_Payload()
}

type SMCCmd_Prepare struct {
	Prepare *PreparePhase `protobuf:"bytes,3,opt,name=prepare,oneof"`
}
type SMCCmd_Session struct {
	Session *SessionPhase `protobuf:"bytes,4,opt,name=session,oneof"`
}

func (*SMCCmd_Prepare) isSMCCmd_Payload() {}
func (*SMCCmd_Session) isSMCCmd_Payload() {}

func (m *SMCCmd) GetPayload() isSMCCmd_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *SMCCmd) GetPrepare() *PreparePhase {
	if x, ok := m.GetPayload().(*SMCCmd_Prepare); ok {
		return x.Prepare
	}
	return nil
}

func (m *SMCCmd) GetSession() *SessionPhase {
	if x, ok := m.GetPayload().(*SMCCmd_Session); ok {
		return x.Session
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SMCCmd) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SMCCmd_OneofMarshaler, _SMCCmd_OneofUnmarshaler, _SMCCmd_OneofSizer, []interface{}{
		(*SMCCmd_Prepare)(nil),
		(*SMCCmd_Session)(nil),
	}
}

func _SMCCmd_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SMCCmd)
	// payload
	switch x := m.Payload.(type) {
	case *SMCCmd_Prepare:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Prepare); err != nil {
			return err
		}
	case *SMCCmd_Session:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Session); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SMCCmd.Payload has unexpected type %T", x)
	}
	return nil
}

func _SMCCmd_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SMCCmd)
	switch tag {
	case 3: // payload.prepare
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PreparePhase)
		err := b.DecodeMessage(msg)
		m.Payload = &SMCCmd_Prepare{msg}
		return true, err
	case 4: // payload.session
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SessionPhase)
		err := b.DecodeMessage(msg)
		m.Payload = &SMCCmd_Session{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SMCCmd_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SMCCmd)
	// payload
	switch x := m.Payload.(type) {
	case *SMCCmd_Prepare:
		s := proto.Size(x.Prepare)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SMCCmd_Session:
		s := proto.Size(x.Session)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CmdResult struct {
	Status CmdResult_Status `protobuf:"varint,1,opt,name=status,enum=job.CmdResult_Status" json:"status,omitempty"`
	Msg    string           `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	Result *SMCResult       `protobuf:"bytes,3,opt,name=result" json:"result,omitempty"`
	// Partly filled on receiver side (e.g. peer ID)
	Metadata map[string]string `protobuf:"bytes,7,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *CmdResult) Reset()                    { *m = CmdResult{} }
func (m *CmdResult) String() string            { return proto.CompactTextString(m) }
func (*CmdResult) ProtoMessage()               {}
func (*CmdResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CmdResult) GetResult() *SMCResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *CmdResult) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type SMCResult struct {
	Res float64 `protobuf:"fixed64,1,opt,name=res" json:"res,omitempty"`
}

func (m *SMCResult) Reset()                    { *m = SMCResult{} }
func (m *SMCResult) String() string            { return proto.CompactTextString(m) }
func (*SMCResult) ProtoMessage()               {}
func (*SMCResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*SMCTask)(nil), "job.SMCTask")
	proto.RegisterType((*PreparePhase)(nil), "job.PreparePhase")
	proto.RegisterType((*PreparePhase_Participant)(nil), "job.PreparePhase.Participant")
	proto.RegisterType((*SessionPhase)(nil), "job.SessionPhase")
	proto.RegisterType((*SMCCmd)(nil), "job.SMCCmd")
	proto.RegisterType((*CmdResult)(nil), "job.CmdResult")
	proto.RegisterType((*SMCResult)(nil), "job.SMCResult")
	proto.RegisterEnum("job.DataOrigin", DataOrigin_name, DataOrigin_value)
	proto.RegisterEnum("job.Aggregator", Aggregator_name, Aggregator_value)
	proto.RegisterEnum("job.MetadataKey", MetadataKey_name, MetadataKey_value)
	proto.RegisterEnum("job.SMCCmd_Phase", SMCCmd_Phase_name, SMCCmd_Phase_value)
	proto.RegisterEnum("job.CmdResult_Status", CmdResult_Status_name, CmdResult_Status_value)
}

func init() { proto.RegisterFile("job/job.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 955 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x54, 0xdd, 0x8e, 0xdb, 0x54,
	0x10, 0xae, 0xd7, 0xc4, 0xd9, 0xcc, 0x66, 0xb3, 0xce, 0xa1, 0x2d, 0x69, 0xd4, 0x42, 0x89, 0x04,
	0xad, 0x56, 0xc2, 0xbb, 0x2c, 0x37, 0xbb, 0x20, 0x24, 0x9c, 0xf8, 0xb4, 0xeb, 0x76, 0xed, 0x44,
	0xc7, 0xce, 0xa2, 0x5e, 0x59, 0xde, 0xcd, 0x69, 0x1a, 0x36, 0x89, 0x83, 0x7f, 0x10, 0x7b, 0xc3,
	0xcf, 0x03, 0x54, 0xe2, 0x0d, 0x40, 0x3c, 0x49, 0x79, 0x06, 0xee, 0xb8, 0xe2, 0x0e, 0xde, 0x81,
	0x1b, 0xe6, 0x1c, 0xdb, 0x49, 0x36, 0x10, 0x29, 0xd2, 0x99, 0x99, 0xef, 0xcc, 0x7c, 0xf3, 0x79,
	0xe6, 0xc0, 0xee, 0x57, 0xd1, 0xc5, 0x01, 0xfe, 0x8d, 0x45, 0x1c, 0xa5, 0x11, 0x51, 0xf1, 0xd8,
	0x7e, 0x6f, 0x1c, 0x45, 0xe3, 0x29, 0x3f, 0x90, 0xae, 0x8b, 0xec, 0xe5, 0x41, 0x3a, 0x99, 0xf1,
	0x24, 0x0d, 0x67, 0x8b, 0x1c, 0xd5, 0xf9, 0x47, 0x81, 0xaa, 0xe7, 0xf4, 0xfc, 0x30, 0xb9, 0x22,
	0x3a, 0xa8, 0x09, 0x4f, 0x5b, 0xca, 0x43, 0xe5, 0x71, 0x8d, 0x89, 0x23, 0x79, 0x04, 0x5a, 0x12,
	0x65, 0xf1, 0x25, 0x6f, 0x6d, 0xa1, 0xb3, 0x71, 0xb4, 0x67, 0x88, 0xfc, 0x56, 0x98, 0x86, 0xfd,
	0x78, 0x32, 0x9e, 0xcc, 0x59, 0x11, 0x26, 0x07, 0x00, 0xe1, 0x78, 0x1c, 0xf3, 0x71, 0x98, 0x46,
	0x71, 0xeb, 0xad, 0x35, 0xb0, 0xb9, 0x74, 0xb3, 0x35, 0x08, 0x79, 0x0c, 0x7b, 0xe9, 0xe4, 0xf2,
	0x8a, 0xa7, 0xde, 0x64, 0x3c, 0x0f, 0xd3, 0x2c, 0xe6, 0xad, 0xaa, 0xac, 0xbb, 0xe9, 0x26, 0x47,
	0xa0, 0x4d, 0x92, 0x24, 0xe3, 0xa3, 0xd6, 0x36, 0x02, 0x76, 0x8e, 0xda, 0x46, 0xde, 0x93, 0x51,
	0xf6, 0x64, 0xf8, 0x65, 0x4f, 0xac, 0x40, 0x92, 0x0f, 0xa1, 0xf1, 0x75, 0xc6, 0xe3, 0xeb, 0x55,
	0xf2, 0x9a, 0x4c, 0xbe, 0xe1, 0xed, 0xfc, 0xa1, 0x40, 0x7d, 0x10, 0xf3, 0x45, 0x18, 0xf3, 0xc1,
	0xab, 0x30, 0xe1, 0xc4, 0x84, 0x3a, 0x1a, 0x48, 0x61, 0xb2, 0x08, 0xe7, 0x69, 0x82, 0x5a, 0xa8,
	0x58, 0xf2, 0x81, 0xec, 0x64, 0x1d, 0x68, 0x0c, 0x56, 0x28, 0x76, 0xe3, 0x0a, 0xd6, 0xae, 0x26,
	0xb3, 0x4b, 0x21, 0x68, 0x4b, 0x95, 0x84, 0xeb, 0xf2, 0x76, 0x21, 0x32, 0x2b, 0x83, 0xed, 0x00,
	0x76, 0xd6, 0x92, 0x90, 0xbb, 0xa0, 0x85, 0x59, 0xfa, 0xca, 0xb6, 0x0a, 0xfd, 0x0b, 0x8b, 0xdc,
	0x87, 0x1a, 0xde, 0x18, 0x70, 0x1e, 0x63, 0x48, 0x7c, 0x85, 0x0a, 0x5b, 0x39, 0x48, 0x1b, 0xb6,
	0xf9, 0x7c, 0xb4, 0x88, 0x26, 0xf3, 0x54, 0x56, 0xab, 0xb1, 0xa5, 0xdd, 0x69, 0x40, 0xdd, 0xe3,
	0x49, 0x32, 0x89, 0xe6, 0x92, 0x72, 0xe7, 0xa7, 0x2d, 0xd0, 0x90, 0x45, 0x6f, 0x36, 0x92, 0x49,
	0xf3, 0xd0, 0xb2, 0xde, 0xca, 0x71, 0xb3, 0x64, 0x65, 0xb3, 0xe4, 0x23, 0xa8, 0xa0, 0xd8, 0x69,
	0x39, 0x12, 0xcd, 0xb2, 0x3b, 0xcc, 0x6b, 0xc8, 0x42, 0x2c, 0x8f, 0x93, 0x8f, 0xa0, 0xba, 0xc8,
	0x25, 0x2b, 0x84, 0x68, 0xfe, 0x47, 0xc6, 0xd3, 0x5b, 0xac, 0xc4, 0x08, 0x78, 0x41, 0x41, 0xce,
	0x4f, 0x09, 0x5f, 0x6f, 0x41, 0xc0, 0x0b, 0x4c, 0xe7, 0x18, 0x2a, 0xf9, 0x27, 0xdb, 0x81, 0xea,
	0x80, 0xd1, 0x81, 0xc9, 0xa8, 0x7e, 0x4b, 0x18, 0x1e, 0xf5, 0x3c, 0xbb, 0xef, 0xea, 0x0a, 0x01,
	0xd0, 0x9e, 0xd8, 0xae, 0xed, 0x9d, 0xea, 0xdf, 0x91, 0x1a, 0x54, 0xcc, 0x6e, 0x9f, 0xf9, 0xfa,
	0xf7, 0xdd, 0x1a, 0xf2, 0x0a, 0xaf, 0xa7, 0x51, 0x38, 0xea, 0xfc, 0xa6, 0x42, 0x0d, 0x79, 0x33,
	0x9e, 0x64, 0xd3, 0x14, 0x19, 0x68, 0x82, 0x79, 0x96, 0x48, 0x49, 0x1a, 0x47, 0x77, 0x24, 0x81,
	0x65, 0xdc, 0xf0, 0x64, 0x90, 0x15, 0x20, 0xb1, 0x2e, 0xb3, 0x64, 0x2c, 0x65, 0xc0, 0x75, 0xc1,
	0x23, 0x7e, 0x7a, 0x2d, 0x96, 0xd0, 0xa2, 0xe1, 0x46, 0xa9, 0x4d, 0x9e, 0x80, 0x15, 0x51, 0x72,
	0x0c, 0xdb, 0x33, 0x9e, 0x86, 0x23, 0xdc, 0x23, 0x9c, 0x7a, 0x31, 0x61, 0xf7, 0x37, 0x4a, 0x39,
	0x45, 0x98, 0xce, 0xd3, 0xf8, 0x9a, 0x2d, 0xd1, 0xed, 0xcf, 0x60, 0xf7, 0x46, 0x48, 0x90, 0xb8,
	0xe2, 0xd7, 0xe5, 0xce, 0xe2, 0x91, 0xdc, 0x86, 0xca, 0x37, 0xe1, 0x34, 0xe3, 0x05, 0xb1, 0xdc,
	0xf8, 0x74, 0xeb, 0x58, 0xe9, 0xfc, 0xae, 0xe0, 0x00, 0xe4, 0xdc, 0x85, 0x4e, 0xc3, 0x5e, 0x0f,
	0xa5, 0x42, 0xd1, 0x74, 0x1c, 0x94, 0xdc, 0x08, 0xac, 0xbe, 0x4b, 0x51, 0x39, 0x02, 0x0d, 0xca,
	0x58, 0xd0, 0x3b, 0x33, 0xd1, 0xe7, 0xf6, 0x99, 0xa3, 0x3f, 0x24, 0x7b, 0xb0, 0x33, 0x74, 0x9f,
	0xbb, 0xfd, 0x2f, 0xdd, 0xa0, 0xe7, 0x58, 0xfa, 0xfb, 0x42, 0x5e, 0x8b, 0xba, 0x36, 0xb5, 0xf4,
	0x0e, 0x79, 0x1b, 0xf6, 0x56, 0x17, 0x9e, 0x98, 0xc3, 0x33, 0x5f, 0xff, 0x42, 0x14, 0x91, 0x9a,
	0x23, 0xc2, 0x44, 0xc4, 0x5a, 0xca, 0x5e, 0xdf, 0x71, 0xf4, 0x1f, 0x14, 0xcc, 0x09, 0x9e, 0xcf,
	0xa8, 0xe9, 0x04, 0x18, 0xd3, 0x7f, 0x54, 0xc8, 0x3d, 0xb8, 0xed, 0xd1, 0x73, 0xca, 0xa8, 0x70,
	0xf4, 0x0b, 0x38, 0xf5, 0xf4, 0x37, 0x0a, 0x2e, 0x48, 0xd3, 0x3c, 0x3b, 0xdb, 0xf0, 0xff, 0xa9,
	0x74, 0x1e, 0x40, 0x6d, 0xa9, 0xb0, 0x90, 0x03, 0x35, 0x96, 0x72, 0x28, 0x4c, 0x1c, 0xf7, 0xdf,
	0x28, 0x00, 0xab, 0x07, 0x4b, 0x74, 0xe1, 0x53, 0x67, 0x40, 0x99, 0xe9, 0x0f, 0xe5, 0xc4, 0xd4,
	0x61, 0xfb, 0x74, 0xe8, 0xd8, 0x96, 0xed, 0xbf, 0xc0, 0xc6, 0x05, 0x65, 0xa7, 0x6b, 0x53, 0xd7,
	0xd7, 0xb7, 0x84, 0x2e, 0xa6, 0xcd, 0x02, 0x9c, 0x2e, 0xcf, 0x13, 0x60, 0x55, 0x80, 0x85, 0x45,
	0xdd, 0x1e, 0xd5, 0x81, 0x34, 0xa1, 0x2e, 0x0c, 0x76, 0x4e, 0xad, 0xe0, 0xe4, 0xe4, 0x44, 0xff,
	0xab, 0x8a, 0xab, 0xf3, 0x8e, 0xf5, 0xc2, 0x35, 0x1d, 0xbb, 0x17, 0x20, 0x41, 0xfb, 0xa9, 0xeb,
	0x60, 0xaa, 0xe0, 0xe3, 0xc3, 0xc3, 0x43, 0xfd, 0xef, 0x2a, 0x79, 0x17, 0x5a, 0xff, 0x13, 0x3d,
	0x11, 0x3f, 0xfd, 0xe7, 0xd7, 0x1a, 0xb9, 0x03, 0x7b, 0xcb, 0x84, 0xe2, 0x0e, 0xde, 0xfa, 0xe5,
	0xb5, 0xb6, 0xff, 0x39, 0xc0, 0xea, 0x15, 0x25, 0x55, 0x50, 0xbd, 0xa1, 0x83, 0xcc, 0xf1, 0x60,
	0x9e, 0x3f, 0xcd, 0xe7, 0xdc, 0xa1, 0x96, 0x6d, 0xba, 0xc8, 0xb9, 0x09, 0xbb, 0x9e, 0x6f, 0x05,
	0x16, 0x3d, 0xb7, 0x4d, 0x5f, 0xac, 0x81, 0xba, 0x7f, 0x0f, 0x76, 0xca, 0x99, 0x79, 0x8e, 0xf3,
	0x81, 0xe8, 0x01, 0xa5, 0xcc, 0xb6, 0xf4, 0x5b, 0xdd, 0x0f, 0xe0, 0xee, 0x88, 0x1b, 0x69, 0x36,
	0x33, 0x5e, 0x4e, 0xf9, 0xb7, 0xb8, 0xe3, 0x86, 0xf8, 0xc7, 0x8b, 0xcb, 0xae, 0xfa, 0x2c, 0xba,
	0x18, 0x28, 0xbf, 0x6e, 0xa9, 0xcf, 0xfa, 0xdd, 0x0b, 0x4d, 0x3e, 0xb5, 0x9f, 0xfc, 0x1b, 0x00,
	0x00, 0xff, 0xff, 0xb9, 0x5e, 0xbd, 0xa1, 0x62, 0x06, 0x00, 0x00,
}
