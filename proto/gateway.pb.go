// Code generated by protoc-gen-go.
// source: gateway.proto
// DO NOT EDIT!

/*
Package flexsmc is a generated protocol buffer package.

It is generated from these files:
	gateway.proto

It has these top-level messages:
	SMCInfo
	SMCCmd
	CmdResult
*/
package flexsmc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SMCCmd_Type int32

const (
	SMCCmd_CMD1 SMCCmd_Type = 0
	SMCCmd_CMD2 SMCCmd_Type = 1
	SMCCmd_CMD3 SMCCmd_Type = 2
)

var SMCCmd_Type_name = map[int32]string{
	0: "CMD1",
	1: "CMD2",
	2: "CMD3",
}
var SMCCmd_Type_value = map[string]int32{
	"CMD1": 0,
	"CMD2": 1,
	"CMD3": 2,
}

func (x SMCCmd_Type) String() string {
	return proto.EnumName(SMCCmd_Type_name, int32(x))
}
func (SMCCmd_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type CmdResult_Status int32

const (
	CmdResult_SUCCESS     CmdResult_Status = 0
	CmdResult_UNKNOWN_CMD CmdResult_Status = 1
	CmdResult_DENIED      CmdResult_Status = 2
)

var CmdResult_Status_name = map[int32]string{
	0: "SUCCESS",
	1: "UNKNOWN_CMD",
	2: "DENIED",
}
var CmdResult_Status_value = map[string]int32{
	"SUCCESS":     0,
	"UNKNOWN_CMD": 1,
	"DENIED":      2,
}

func (x CmdResult_Status) String() string {
	return proto.EnumName(CmdResult_Status_name, int32(x))
}
func (CmdResult_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type SMCInfo struct {
	// tcpport
	Tcpport uint32 `protobuf:"varint,1,opt,name=tcpport" json:"tcpport,omitempty"`
}

func (m *SMCInfo) Reset()                    { *m = SMCInfo{} }
func (m *SMCInfo) String() string            { return proto.CompactTextString(m) }
func (*SMCInfo) ProtoMessage()               {}
func (*SMCInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SMCCmd struct {
	Type SMCCmd_Type `protobuf:"varint,1,opt,name=type,enum=flexsmc.SMCCmd_Type" json:"type,omitempty"`
}

func (m *SMCCmd) Reset()                    { *m = SMCCmd{} }
func (m *SMCCmd) String() string            { return proto.CompactTextString(m) }
func (*SMCCmd) ProtoMessage()               {}
func (*SMCCmd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CmdResult struct {
	Status CmdResult_Status `protobuf:"varint,1,opt,name=status,enum=flexsmc.CmdResult_Status" json:"status,omitempty"`
}

func (m *CmdResult) Reset()                    { *m = CmdResult{} }
func (m *CmdResult) String() string            { return proto.CompactTextString(m) }
func (*CmdResult) ProtoMessage()               {}
func (*CmdResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*SMCInfo)(nil), "flexsmc.SMCInfo")
	proto.RegisterType((*SMCCmd)(nil), "flexsmc.SMCCmd")
	proto.RegisterType((*CmdResult)(nil), "flexsmc.CmdResult")
	proto.RegisterEnum("flexsmc.SMCCmd_Type", SMCCmd_Type_name, SMCCmd_Type_value)
	proto.RegisterEnum("flexsmc.CmdResult_Status", CmdResult_Status_name, CmdResult_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Gateway service

type GatewayClient interface {
	Ping(ctx context.Context, in *SMCInfo, opts ...grpc.CallOption) (*CmdResult, error)
	AwaitSMCCommands(ctx context.Context, in *SMCInfo, opts ...grpc.CallOption) (Gateway_AwaitSMCCommandsClient, error)
}

type gatewayClient struct {
	cc *grpc.ClientConn
}

func NewGatewayClient(cc *grpc.ClientConn) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) Ping(ctx context.Context, in *SMCInfo, opts ...grpc.CallOption) (*CmdResult, error) {
	out := new(CmdResult)
	err := grpc.Invoke(ctx, "/flexsmc.Gateway/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AwaitSMCCommands(ctx context.Context, in *SMCInfo, opts ...grpc.CallOption) (Gateway_AwaitSMCCommandsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Gateway_serviceDesc.Streams[0], c.cc, "/flexsmc.Gateway/AwaitSMCCommands", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayAwaitSMCCommandsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gateway_AwaitSMCCommandsClient interface {
	Recv() (*SMCCmd, error)
	grpc.ClientStream
}

type gatewayAwaitSMCCommandsClient struct {
	grpc.ClientStream
}

func (x *gatewayAwaitSMCCommandsClient) Recv() (*SMCCmd, error) {
	m := new(SMCCmd)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Gateway service

type GatewayServer interface {
	Ping(context.Context, *SMCInfo) (*CmdResult, error)
	AwaitSMCCommands(*SMCInfo, Gateway_AwaitSMCCommandsServer) error
}

func RegisterGatewayServer(s *grpc.Server, srv GatewayServer) {
	s.RegisterService(&_Gateway_serviceDesc, srv)
}

func _Gateway_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMCInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flexsmc.Gateway/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Ping(ctx, req.(*SMCInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AwaitSMCCommands_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SMCInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayServer).AwaitSMCCommands(m, &gatewayAwaitSMCCommandsServer{stream})
}

type Gateway_AwaitSMCCommandsServer interface {
	Send(*SMCCmd) error
	grpc.ServerStream
}

type gatewayAwaitSMCCommandsServer struct {
	grpc.ServerStream
}

func (x *gatewayAwaitSMCCommandsServer) Send(m *SMCCmd) error {
	return x.ServerStream.SendMsg(m)
}

var _Gateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flexsmc.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Gateway_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AwaitSMCCommands",
			Handler:       _Gateway_AwaitSMCCommands_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("gateway.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x91, 0xc1, 0x4f, 0xb3, 0x40,
	0x10, 0xc5, 0xa1, 0x21, 0xf0, 0x7d, 0xd3, 0xd4, 0x6e, 0x36, 0x1e, 0xaa, 0x17, 0xcd, 0xea, 0xa1,
	0xa7, 0x8d, 0xa5, 0x27, 0x8f, 0x16, 0x88, 0x69, 0x4c, 0xb1, 0x01, 0x1b, 0xbd, 0x19, 0x4a, 0x29,
	0x92, 0x14, 0x96, 0xc0, 0x90, 0xda, 0xff, 0xde, 0x85, 0x42, 0x63, 0xd4, 0xdb, 0x6c, 0xe6, 0x37,
	0xf3, 0xe6, 0xbd, 0x85, 0x41, 0x1c, 0x60, 0xb4, 0x0f, 0x0e, 0x3c, 0x2f, 0x04, 0x0a, 0x6a, 0x6c,
	0x77, 0xd1, 0x67, 0x99, 0x86, 0xec, 0x06, 0x0c, 0x7f, 0x61, 0xcd, 0xb3, 0xad, 0xa0, 0x23, 0x30,
	0x30, 0xcc, 0x73, 0x51, 0xe0, 0x48, 0xbd, 0x56, 0xc7, 0x03, 0xaf, 0x7b, 0xb2, 0x37, 0xd0, 0x25,
	0x64, 0xa5, 0x1b, 0x3a, 0x06, 0x0d, 0x0f, 0x79, 0xd4, 0x00, 0x67, 0xe6, 0x39, 0x6f, 0xd7, 0xf0,
	0x63, 0x9b, 0xbf, 0xc8, 0x9e, 0xd7, 0x10, 0xec, 0x16, 0xb4, 0xfa, 0x45, 0xff, 0x81, 0x66, 0x2d,
	0xec, 0x09, 0x51, 0xda, 0xca, 0x24, 0x6a, 0x5b, 0x4d, 0x49, 0x8f, 0x15, 0xf0, 0x5f, 0xce, 0x79,
	0x51, 0x59, 0xed, 0x90, 0x4e, 0x40, 0x2f, 0x31, 0xc0, 0xaa, 0x6c, 0xd7, 0x5f, 0x9c, 0xd6, 0x9f,
	0x18, 0xee, 0x37, 0x80, 0xd7, 0x82, 0xcc, 0x94, 0x97, 0x35, 0x15, 0xed, 0x4b, 0x23, 0x2b, 0xcb,
	0x72, 0x7c, 0x5f, 0x4a, 0x0d, 0xa1, 0xbf, 0x72, 0x9f, 0xdc, 0xe7, 0x57, 0xf7, 0x5d, 0x0a, 0x49,
	0x45, 0x00, 0xdd, 0x76, 0xdc, 0xb9, 0x63, 0x93, 0x9e, 0x89, 0x60, 0x3c, 0x1e, 0xc3, 0xa0, 0x1c,
	0xb4, 0x65, 0x92, 0xc5, 0x94, 0x7c, 0x37, 0x52, 0x87, 0x71, 0x49, 0x7f, 0x6b, 0x33, 0x85, 0xde,
	0x03, 0x79, 0xd8, 0x07, 0x09, 0xd6, 0x76, 0x45, 0x9a, 0x06, 0xd9, 0xa6, 0xfc, 0x63, 0x76, 0xf8,
	0x23, 0x16, 0xa6, 0xdc, 0xa9, 0xb3, 0x2b, 0xa0, 0xa1, 0x48, 0x79, 0x9c, 0xe0, 0x47, 0xb5, 0xee,
	0x80, 0x59, 0x77, 0xc9, 0x52, 0x5d, 0xeb, 0xcd, 0xcf, 0x4c, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xe1, 0xe8, 0xd3, 0x83, 0xaa, 0x01, 0x00, 0x00,
}
