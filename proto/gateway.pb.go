// Code generated by protoc-gen-go.
// source: gateway.proto
// DO NOT EDIT!

/*
Package flexsmc is a generated protocol buffer package.

It is generated from these files:
	gateway.proto

It has these top-level messages:
	SMCInfo
	SMCCmd
*/
package flexsmc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import job "github.com/grandcat/flexsmc/proto/job"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MetadataKey int32

const (
	MetadataKey_PEERID MetadataKey = 0
)

var MetadataKey_name = map[int32]string{
	0: "PEERID",
}
var MetadataKey_value = map[string]int32{
	"PEERID": 0,
}

func (x MetadataKey) String() string {
	return proto.EnumName(MetadataKey_name, int32(x))
}
func (MetadataKey) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SMCCmd_Phase int32

const (
	SMCCmd_PREPARE SMCCmd_Phase = 0
	SMCCmd_SESSION SMCCmd_Phase = 1
	// ...
	SMCCmd_FINISH SMCCmd_Phase = 126
	SMCCmd_ABORT  SMCCmd_Phase = 127
)

var SMCCmd_Phase_name = map[int32]string{
	0:   "PREPARE",
	1:   "SESSION",
	126: "FINISH",
	127: "ABORT",
}
var SMCCmd_Phase_value = map[string]int32{
	"PREPARE": 0,
	"SESSION": 1,
	"FINISH":  126,
	"ABORT":   127,
}

func (x SMCCmd_Phase) String() string {
	return proto.EnumName(SMCCmd_Phase_name, int32(x))
}
func (SMCCmd_Phase) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type SMCInfo struct {
	// tcpport
	Tcpport uint32 `protobuf:"varint,1,opt,name=tcpport" json:"tcpport,omitempty"`
}

func (m *SMCInfo) Reset()                    { *m = SMCInfo{} }
func (m *SMCInfo) String() string            { return proto.CompactTextString(m) }
func (*SMCInfo) ProtoMessage()               {}
func (*SMCInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SMCCmd struct {
	SessionID uint64       `protobuf:"varint,1,opt,name=sessionID" json:"sessionID,omitempty"`
	State     SMCCmd_Phase `protobuf:"varint,2,opt,name=state,enum=flexsmc.SMCCmd_Phase" json:"state,omitempty"`
	// Payload packet
	//
	// Types that are valid to be assigned to Payload:
	//	*SMCCmd_Prepare
	//	*SMCCmd_Session
	Payload isSMCCmd_Payload `protobuf_oneof:"payload"`
}

func (m *SMCCmd) Reset()                    { *m = SMCCmd{} }
func (m *SMCCmd) String() string            { return proto.CompactTextString(m) }
func (*SMCCmd) ProtoMessage()               {}
func (*SMCCmd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isSMCCmd_Payload interface {
	isSMCCmd_Payload()
}

type SMCCmd_Prepare struct {
	Prepare *job.PreparePhase `protobuf:"bytes,3,opt,name=prepare,oneof"`
}
type SMCCmd_Session struct {
	Session *job.SessionPhase `protobuf:"bytes,4,opt,name=session,oneof"`
}

func (*SMCCmd_Prepare) isSMCCmd_Payload() {}
func (*SMCCmd_Session) isSMCCmd_Payload() {}

func (m *SMCCmd) GetPayload() isSMCCmd_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *SMCCmd) GetPrepare() *job.PreparePhase {
	if x, ok := m.GetPayload().(*SMCCmd_Prepare); ok {
		return x.Prepare
	}
	return nil
}

func (m *SMCCmd) GetSession() *job.SessionPhase {
	if x, ok := m.GetPayload().(*SMCCmd_Session); ok {
		return x.Session
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SMCCmd) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SMCCmd_OneofMarshaler, _SMCCmd_OneofUnmarshaler, _SMCCmd_OneofSizer, []interface{}{
		(*SMCCmd_Prepare)(nil),
		(*SMCCmd_Session)(nil),
	}
}

func _SMCCmd_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SMCCmd)
	// payload
	switch x := m.Payload.(type) {
	case *SMCCmd_Prepare:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Prepare); err != nil {
			return err
		}
	case *SMCCmd_Session:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Session); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SMCCmd.Payload has unexpected type %T", x)
	}
	return nil
}

func _SMCCmd_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SMCCmd)
	switch tag {
	case 3: // payload.prepare
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(job.PreparePhase)
		err := b.DecodeMessage(msg)
		m.Payload = &SMCCmd_Prepare{msg}
		return true, err
	case 4: // payload.session
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(job.SessionPhase)
		err := b.DecodeMessage(msg)
		m.Payload = &SMCCmd_Session{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SMCCmd_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SMCCmd)
	// payload
	switch x := m.Payload.(type) {
	case *SMCCmd_Prepare:
		s := proto.Size(x.Prepare)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SMCCmd_Session:
		s := proto.Size(x.Session)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*SMCInfo)(nil), "flexsmc.SMCInfo")
	proto.RegisterType((*SMCCmd)(nil), "flexsmc.SMCCmd")
	proto.RegisterEnum("flexsmc.MetadataKey", MetadataKey_name, MetadataKey_value)
	proto.RegisterEnum("flexsmc.SMCCmd_Phase", SMCCmd_Phase_name, SMCCmd_Phase_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Gateway service

type GatewayClient interface {
	Ping(ctx context.Context, in *SMCInfo, opts ...grpc.CallOption) (*job.CmdResult, error)
	// A peer can open multiple streams if it has enough capacities.
	AwaitSMCRound(ctx context.Context, opts ...grpc.CallOption) (Gateway_AwaitSMCRoundClient, error)
}

type gatewayClient struct {
	cc *grpc.ClientConn
}

func NewGatewayClient(cc *grpc.ClientConn) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) Ping(ctx context.Context, in *SMCInfo, opts ...grpc.CallOption) (*job.CmdResult, error) {
	out := new(job.CmdResult)
	err := grpc.Invoke(ctx, "/flexsmc.Gateway/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AwaitSMCRound(ctx context.Context, opts ...grpc.CallOption) (Gateway_AwaitSMCRoundClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Gateway_serviceDesc.Streams[0], c.cc, "/flexsmc.Gateway/AwaitSMCRound", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayAwaitSMCRoundClient{stream}
	return x, nil
}

type Gateway_AwaitSMCRoundClient interface {
	Send(*job.CmdResult) error
	Recv() (*SMCCmd, error)
	grpc.ClientStream
}

type gatewayAwaitSMCRoundClient struct {
	grpc.ClientStream
}

func (x *gatewayAwaitSMCRoundClient) Send(m *job.CmdResult) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gatewayAwaitSMCRoundClient) Recv() (*SMCCmd, error) {
	m := new(SMCCmd)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Gateway service

type GatewayServer interface {
	Ping(context.Context, *SMCInfo) (*job.CmdResult, error)
	// A peer can open multiple streams if it has enough capacities.
	AwaitSMCRound(Gateway_AwaitSMCRoundServer) error
}

func RegisterGatewayServer(s *grpc.Server, srv GatewayServer) {
	s.RegisterService(&_Gateway_serviceDesc, srv)
}

func _Gateway_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMCInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flexsmc.Gateway/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Ping(ctx, req.(*SMCInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AwaitSMCRound_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GatewayServer).AwaitSMCRound(&gatewayAwaitSMCRoundServer{stream})
}

type Gateway_AwaitSMCRoundServer interface {
	Send(*SMCCmd) error
	Recv() (*job.CmdResult, error)
	grpc.ServerStream
}

type gatewayAwaitSMCRoundServer struct {
	grpc.ServerStream
}

func (x *gatewayAwaitSMCRoundServer) Send(m *SMCCmd) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gatewayAwaitSMCRoundServer) Recv() (*job.CmdResult, error) {
	m := new(job.CmdResult)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Gateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flexsmc.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Gateway_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AwaitSMCRound",
			Handler:       _Gateway_AwaitSMCRound_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("gateway.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x91, 0x5f, 0x6b, 0xe2, 0x40,
	0x14, 0xc5, 0x93, 0x5d, 0x35, 0x78, 0x45, 0x37, 0x3b, 0xb0, 0x90, 0x95, 0x85, 0x2d, 0xe9, 0x8b,
	0x58, 0x9a, 0x14, 0x0b, 0xa5, 0xaf, 0x46, 0xd3, 0x1a, 0x8a, 0x1a, 0x26, 0xfd, 0x02, 0x63, 0x32,
	0xc6, 0x14, 0x93, 0x09, 0xc9, 0x88, 0xf5, 0xa5, 0xfd, 0xd6, 0x7d, 0xee, 0xe4, 0x8f, 0xad, 0xf8,
	0x30, 0x0f, 0x73, 0xee, 0xef, 0x72, 0xcf, 0xbd, 0x07, 0xba, 0x21, 0xe1, 0x74, 0x4f, 0x0e, 0x46,
	0x9a, 0x31, 0xce, 0x90, 0xb2, 0xde, 0xd2, 0xd7, 0x3c, 0xf6, 0xfb, 0x66, 0x18, 0xf1, 0xcd, 0x6e,
	0x65, 0xf8, 0x2c, 0x36, 0xc3, 0x8c, 0x24, 0x81, 0x4f, 0xb8, 0x59, 0x17, 0xcd, 0x92, 0x35, 0x5f,
	0xd8, 0xaa, 0x78, 0x55, 0xa7, 0x7e, 0x09, 0x8a, 0x37, 0x9f, 0x38, 0xc9, 0x9a, 0x21, 0x0d, 0x14,
	0xee, 0xa7, 0x29, 0xcb, 0xb8, 0x26, 0x5f, 0xc8, 0x83, 0x2e, 0x3e, 0x7e, 0xf5, 0x0f, 0x19, 0x5a,
	0x82, 0x9a, 0xc4, 0x01, 0xfa, 0x07, 0xed, 0x9c, 0xe6, 0x79, 0xc4, 0x12, 0x67, 0x5a, 0x62, 0x0d,
	0xfc, 0x2d, 0xa0, 0x2b, 0x68, 0xe6, 0x5c, 0x38, 0xd3, 0x7e, 0x88, 0x4a, 0x6f, 0xf4, 0xc7, 0xa8,
	0x47, 0x1b, 0x55, 0xb7, 0xe1, 0x6e, 0x48, 0x4e, 0x71, 0xc5, 0xa0, 0x6b, 0x50, 0xd2, 0x8c, 0xa6,
	0x24, 0xa3, 0xda, 0x4f, 0x81, 0x77, 0x46, 0xbf, 0x8d, 0xc2, 0x97, 0x5b, 0x69, 0x25, 0x3a, 0x93,
	0xf0, 0x91, 0x29, 0xf0, 0x7a, 0x90, 0xd6, 0x38, 0xc1, 0xbd, 0x4a, 0xfb, 0xc2, 0x6b, 0x46, 0xbf,
	0x87, 0x66, 0xa9, 0xa1, 0x0e, 0x28, 0x2e, 0xb6, 0xdd, 0x31, 0xb6, 0x55, 0xa9, 0xf8, 0x78, 0xb6,
	0xe7, 0x39, 0xcb, 0x85, 0x2a, 0x23, 0x80, 0xd6, 0x83, 0xb3, 0x70, 0xbc, 0x99, 0xfa, 0x86, 0xda,
	0xd0, 0x1c, 0x5b, 0x4b, 0xfc, 0xac, 0xbe, 0x5b, 0x6d, 0xe1, 0x8b, 0x1c, 0xb6, 0x8c, 0x04, 0xc3,
	0xbf, 0xd0, 0x99, 0x53, 0x4e, 0x02, 0xc2, 0xc9, 0x13, 0x3d, 0x14, 0x0d, 0xae, 0x6d, 0x63, 0x67,
	0xaa, 0x4a, 0xa3, 0x18, 0x94, 0xc7, 0x2a, 0x03, 0x34, 0x84, 0x86, 0x1b, 0x25, 0x21, 0x52, 0x4f,
	0xd7, 0x2d, 0x4e, 0xda, 0xef, 0x95, 0x16, 0xc5, 0xe6, 0x98, 0xe6, 0xbb, 0x2d, 0xd7, 0x25, 0x74,
	0x07, 0xdd, 0xf1, 0x9e, 0x44, 0x5c, 0x10, 0x98, 0xed, 0x92, 0x00, 0x9d, 0x21, 0xfd, 0x5f, 0x67,
	0x37, 0xd3, 0xa5, 0x81, 0x7c, 0x23, 0x5b, 0xff, 0x01, 0x89, 0x4c, 0x8d, 0x3a, 0xde, 0x1a, 0xb1,
	0x8e, 0x16, 0x5c, 0x79, 0xd5, 0x2a, 0xf3, 0xbc, 0xfd, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x20, 0x86,
	0x19, 0x7e, 0x1a, 0x02, 0x00, 0x00,
}
