// Code generated by protoc-gen-go.
// source: gateway.proto
// DO NOT EDIT!

/*
Package flexsmc is a generated protocol buffer package.

It is generated from these files:
	gateway.proto

It has these top-level messages:
	SMCInfo
*/
package flexsmc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import job "github.com/grandcat/flexsmc/proto/job"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SMCInfo struct {
	// tcpport
	Tcpport uint32 `protobuf:"varint,1,opt,name=tcpport" json:"tcpport,omitempty"`
}

func (m *SMCInfo) Reset()                    { *m = SMCInfo{} }
func (m *SMCInfo) String() string            { return proto.CompactTextString(m) }
func (*SMCInfo) ProtoMessage()               {}
func (*SMCInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func init() {
	proto.RegisterType((*SMCInfo)(nil), "flexsmc.SMCInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Gateway service

type GatewayClient interface {
	Ping(ctx context.Context, in *SMCInfo, opts ...grpc.CallOption) (*job.CmdResult, error)
	// A peer can open multiple streams if it has enough capacities.
	AwaitSMCRound(ctx context.Context, opts ...grpc.CallOption) (Gateway_AwaitSMCRoundClient, error)
}

type gatewayClient struct {
	cc *grpc.ClientConn
}

func NewGatewayClient(cc *grpc.ClientConn) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) Ping(ctx context.Context, in *SMCInfo, opts ...grpc.CallOption) (*job.CmdResult, error) {
	out := new(job.CmdResult)
	err := grpc.Invoke(ctx, "/flexsmc.Gateway/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AwaitSMCRound(ctx context.Context, opts ...grpc.CallOption) (Gateway_AwaitSMCRoundClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Gateway_serviceDesc.Streams[0], c.cc, "/flexsmc.Gateway/AwaitSMCRound", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayAwaitSMCRoundClient{stream}
	return x, nil
}

type Gateway_AwaitSMCRoundClient interface {
	Send(*job.CmdResult) error
	Recv() (*job.SMCCmd, error)
	grpc.ClientStream
}

type gatewayAwaitSMCRoundClient struct {
	grpc.ClientStream
}

func (x *gatewayAwaitSMCRoundClient) Send(m *job.CmdResult) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gatewayAwaitSMCRoundClient) Recv() (*job.SMCCmd, error) {
	m := new(job.SMCCmd)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Gateway service

type GatewayServer interface {
	Ping(context.Context, *SMCInfo) (*job.CmdResult, error)
	// A peer can open multiple streams if it has enough capacities.
	AwaitSMCRound(Gateway_AwaitSMCRoundServer) error
}

func RegisterGatewayServer(s *grpc.Server, srv GatewayServer) {
	s.RegisterService(&_Gateway_serviceDesc, srv)
}

func _Gateway_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMCInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flexsmc.Gateway/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Ping(ctx, req.(*SMCInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AwaitSMCRound_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GatewayServer).AwaitSMCRound(&gatewayAwaitSMCRoundServer{stream})
}

type Gateway_AwaitSMCRoundServer interface {
	Send(*job.SMCCmd) error
	Recv() (*job.CmdResult, error)
	grpc.ServerStream
}

type gatewayAwaitSMCRoundServer struct {
	grpc.ServerStream
}

func (x *gatewayAwaitSMCRoundServer) Send(m *job.SMCCmd) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gatewayAwaitSMCRoundServer) Recv() (*job.CmdResult, error) {
	m := new(job.CmdResult)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Gateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flexsmc.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Gateway_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AwaitSMCRound",
			Handler:       _Gateway_AwaitSMCRound_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("gateway.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x4f, 0x4f, 0x4b, 0x86, 0x30,
	0x18, 0x77, 0x10, 0x0d, 0x16, 0x46, 0xec, 0x24, 0x5e, 0x0a, 0xbb, 0x48, 0x87, 0x2d, 0xec, 0x13,
	0xa4, 0x87, 0xe8, 0x10, 0x88, 0x7d, 0x82, 0x39, 0x75, 0x2d, 0x74, 0x13, 0x7d, 0xc4, 0xfa, 0xf6,
	0xef, 0xd4, 0x79, 0x79, 0x0f, 0x3b, 0xfc, 0xf6, 0xfb, 0xfb, 0x90, 0x50, 0x09, 0x68, 0x57, 0xf1,
	0xcf, 0xc6, 0xc9, 0x82, 0xa5, 0xb8, 0xeb, 0xdb, 0xbf, 0x79, 0x90, 0x31, 0x57, 0x1a, 0x7e, 0x96,
	0x9a, 0x49, 0x3b, 0x70, 0x35, 0x09, 0xd3, 0x48, 0x01, 0xdc, 0x93, 0x7c, 0xd7, 0xf2, 0x5f, 0x5b,
	0x6f, 0xef, 0x70, 0x26, 0xcf, 0x04, 0x7f, 0x7f, 0x15, 0x9f, 0xa6, 0xb3, 0x34, 0x22, 0x18, 0xe4,
	0x38, 0xda, 0x09, 0x22, 0xf4, 0x84, 0xd2, 0xb0, 0x3a, 0x61, 0xa6, 0x09, 0xfe, 0x38, 0xfa, 0xe8,
	0x0b, 0xb9, 0x29, 0xb5, 0x51, 0xf4, 0x81, 0xf9, 0x54, 0xe6, 0xed, 0xf1, 0x3d, 0xdb, 0x52, 0x8b,
	0xa1, 0xa9, 0xda, 0x79, 0xe9, 0x21, 0x09, 0x68, 0x46, 0xc2, 0xf7, 0x55, 0x68, 0x70, 0x8a, 0xca,
	0x2e, 0xa6, 0xa1, 0x57, 0x92, 0xf8, 0x6e, 0xc7, 0x8e, 0x76, 0x5f, 0x49, 0x90, 0xa2, 0x57, 0x94,
	0x3f, 0x12, 0xea, 0xb6, 0x33, 0x7f, 0x86, 0xef, 0xc8, 0xcf, 0xfa, 0x12, 0xd5, 0xb7, 0xfb, 0xee,
	0xb7, 0x4b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x48, 0x46, 0xdc, 0x1f, 0x02, 0x01, 0x00, 0x00,
}
